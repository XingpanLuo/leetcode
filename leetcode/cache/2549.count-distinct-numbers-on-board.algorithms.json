{"id":2679,"fid":"2549","name":"统计桌面上的不同数字","slug":"count-distinct-numbers-on-board","link":"https://leetcode.cn/problems/count-distinct-numbers-on-board/description/","percent":63.5296772737531,"level":"Easy","category":"algorithms","en_name":"Count Distinct Numbers on Board","cn_name":"统计桌面上的不同数字","totalAC":"20.9K","totalSubmit":"30.9K","likes":50,"dislikes":0,"desc":"<p>给你一个正整数 <code>n</code> ，开始时，它放在桌面上。在 <code>10<sup>9</sup></code> 天内，每天都要执行下述步骤：</p>\n\n<ul>\n\t<li>对于出现在桌面上的每个数字 <code>x</code> ，找出符合 <code>1 &lt;= i &lt;= n</code> 且满足 <code>x % i == 1</code> 的所有数字 <code>i</code> 。</li>\n\t<li>然后，将这些数字放在桌面上。</li>\n</ul>\n\n<p>返回在 <code>10<sup>9</sup></code> 天之后，出现在桌面上的 <strong>不同</strong> 整数的数目。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>一旦数字放在桌面上，则会一直保留直到结束。</li>\n\t<li><code>%</code> 表示取余运算。例如，<code>14 % 3</code> 等于 <code>2</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>最开始，5 在桌面上。 \n第二天，2 和 4 也出现在桌面上，因为 5 % 2 == 1 且 5 % 4 == 1 。 \n再过一天 3 也出现在桌面上，因为 4 % 3 == 1 。 \n在十亿天结束时，桌面上的不同数字有 2 、3 、4 、5 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3 \n<strong>输出：</strong>2\n<strong>解释：</strong> \n因为 3 % 2 == 1 ，2 也出现在桌面上。 \n在十亿天结束时，桌面上的不同数字只有两个：2 和 3 。 \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int distinctIntegers(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int distinctIntegers(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def distinctIntegers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def distinctIntegers(self, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"int distinctIntegers(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int DistinctIntegers(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar distinctIntegers = function(n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function distinctIntegers(n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function distinctIntegers($n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func distinctIntegers(_ n: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun distinctIntegers(n: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int distinctIntegers(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func distinctIntegers(n int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef distinct_integers(n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def distinctIntegers(n: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn distinct_integers(n: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (distinct-integers n)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec distinct_integers(N :: integer()) -> integer().\ndistinct_integers(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec distinct_integers(n :: integer) :: integer\n  def distinct_integers(n) do\n    \n  end\nend"}],"testcase":"5","testable":true,"templateMeta":{"name":"distinctIntegers","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}