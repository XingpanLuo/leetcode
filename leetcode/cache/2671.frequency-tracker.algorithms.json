{"id":2778,"fid":"2671","name":"频率跟踪器","slug":"frequency-tracker","link":"https://leetcode.cn/problems/frequency-tracker/description/","percent":40.27024795662823,"level":"Medium","category":"algorithms","en_name":"Frequency Tracker","cn_name":"频率跟踪器","totalAC":"14.6K","totalSubmit":"36.3K","likes":32,"dislikes":0,"desc":"<p>请你设计并实现一个能够对其中的值进行跟踪的数据结构，并支持对频率相关查询进行应答。</p>\n\n<p>实现 <code>FrequencyTracker</code> 类：</p>\n\n<ul>\n\t<li><code>FrequencyTracker()</code>：使用一个空数组初始化 <code>FrequencyTracker</code> 对象。</li>\n\t<li><code>void add(int number)</code>：添加一个 <code>number</code> 到数据结构中。</li>\n\t<li><code>void deleteOne(int number)</code>：从数据结构中删除一个 <code>number</code> 。数据结构 <strong>可能不包含</strong> <code>number</code> ，在这种情况下不删除任何内容。</li>\n\t<li><code>bool hasFrequency(int frequency)</code>: 如果数据结构中存在出现 <code>frequency</code> 次的数字，则返回 <code>true</code>，否则返回 <code>false</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]\n<strong>输出</strong>\n[null, null, null, true]\n\n<strong>解释</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // 数据结构现在包含 [3]\nfrequencyTracker.add(3); // 数据结构现在包含 [3, 3]\nfrequencyTracker.hasFrequency(2); // 返回 true ，因为 3 出现 2 次\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]\n<strong>输出</strong>\n[null, null, null, false]\n\n<strong>解释</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // 数据结构现在包含 [1]\nfrequencyTracker.deleteOne(1); // 数据结构现在为空 []\nfrequencyTracker.hasFrequency(1); // 返回 false ，因为数据结构为空\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]\n<strong>输出</strong>\n[null, false, null, true]\n\n<strong>解释</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // 返回 false ，因为数据结构为空\nfrequencyTracker.add(3); // 数据结构现在包含 [3]\nfrequencyTracker.hasFrequency(1); // 返回 true ，因为 3 出现 1 次\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= number &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= frequency &lt;= 10<sup>5</sup></code></li>\n\t<li>最多调用 <code>add</code>、<code>deleteOne</code> 和 <code>hasFrequency</code> <strong>共计</strong> <code>2 *&nbsp;10<sup>5</sup></code> 次</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class FrequencyTracker {\npublic:\n    FrequencyTracker() {\n\n    }\n    \n    void add(int number) {\n\n    }\n    \n    void deleteOne(int number) {\n\n    }\n    \n    bool hasFrequency(int frequency) {\n\n    }\n};\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker* obj = new FrequencyTracker();\n * obj->add(number);\n * obj->deleteOne(number);\n * bool param_3 = obj->hasFrequency(frequency);\n */"},{"value":"java","text":"Java","defaultCode":"class FrequencyTracker {\n\n    public FrequencyTracker() {\n\n    }\n    \n    public void add(int number) {\n\n    }\n    \n    public void deleteOne(int number) {\n\n    }\n    \n    public boolean hasFrequency(int frequency) {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker obj = new FrequencyTracker();\n * obj.add(number);\n * obj.deleteOne(number);\n * boolean param_3 = obj.hasFrequency(frequency);\n */"},{"value":"python","text":"Python","defaultCode":"class FrequencyTracker(object):\n\n    def __init__(self):\n\n\n    def add(self, number):\n        \"\"\"\n        :type number: int\n        :rtype: None\n        \"\"\"\n\n\n    def deleteOne(self, number):\n        \"\"\"\n        :type number: int\n        :rtype: None\n        \"\"\"\n\n\n    def hasFrequency(self, frequency):\n        \"\"\"\n        :type frequency: int\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker()\n# obj.add(number)\n# obj.deleteOne(number)\n# param_3 = obj.hasFrequency(frequency)"},{"value":"python3","text":"Python3","defaultCode":"class FrequencyTracker:\n\n    def __init__(self):\n\n\n    def add(self, number: int) -> None:\n\n\n    def deleteOne(self, number: int) -> None:\n\n\n    def hasFrequency(self, frequency: int) -> bool:\n\n\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker()\n# obj.add(number)\n# obj.deleteOne(number)\n# param_3 = obj.hasFrequency(frequency)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} FrequencyTracker;\n\n\nFrequencyTracker* frequencyTrackerCreate() {\n    \n}\n\nvoid frequencyTrackerAdd(FrequencyTracker* obj, int number) {\n  \n}\n\nvoid frequencyTrackerDeleteOne(FrequencyTracker* obj, int number) {\n  \n}\n\nbool frequencyTrackerHasFrequency(FrequencyTracker* obj, int frequency) {\n  \n}\n\nvoid frequencyTrackerFree(FrequencyTracker* obj) {\n    \n}\n\n/**\n * Your FrequencyTracker struct will be instantiated and called as such:\n * FrequencyTracker* obj = frequencyTrackerCreate();\n * frequencyTrackerAdd(obj, number);\n \n * frequencyTrackerDeleteOne(obj, number);\n \n * bool param_3 = frequencyTrackerHasFrequency(obj, frequency);\n \n * frequencyTrackerFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class FrequencyTracker {\n\n    public FrequencyTracker() {\n\n    }\n    \n    public void Add(int number) {\n\n    }\n    \n    public void DeleteOne(int number) {\n\n    }\n    \n    public bool HasFrequency(int frequency) {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker obj = new FrequencyTracker();\n * obj.Add(number);\n * obj.DeleteOne(number);\n * bool param_3 = obj.HasFrequency(frequency);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar FrequencyTracker = function() {\n\n};\n\n/** \n * @param {number} number\n * @return {void}\n */\nFrequencyTracker.prototype.add = function(number) {\n\n};\n\n/** \n * @param {number} number\n * @return {void}\n */\nFrequencyTracker.prototype.deleteOne = function(number) {\n\n};\n\n/** \n * @param {number} frequency\n * @return {boolean}\n */\nFrequencyTracker.prototype.hasFrequency = function(frequency) {\n\n};\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * var obj = new FrequencyTracker()\n * obj.add(number)\n * obj.deleteOne(number)\n * var param_3 = obj.hasFrequency(frequency)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class FrequencyTracker {\n    constructor() {\n\n    }\n\n    add(number: number): void {\n\n    }\n\n    deleteOne(number: number): void {\n\n    }\n\n    hasFrequency(frequency: number): boolean {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * var obj = new FrequencyTracker()\n * obj.add(number)\n * obj.deleteOne(number)\n * var param_3 = obj.hasFrequency(frequency)\n */"},{"value":"php","text":"PHP","defaultCode":"class FrequencyTracker {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $number\n     * @return NULL\n     */\n    function add($number) {\n\n    }\n\n    /**\n     * @param Integer $number\n     * @return NULL\n     */\n    function deleteOne($number) {\n\n    }\n\n    /**\n     * @param Integer $frequency\n     * @return Boolean\n     */\n    function hasFrequency($frequency) {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * $obj = FrequencyTracker();\n * $obj->add($number);\n * $obj->deleteOne($number);\n * $ret_3 = $obj->hasFrequency($frequency);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass FrequencyTracker {\n\n    init() {\n\n    }\n    \n    func add(_ number: Int) {\n\n    }\n    \n    func deleteOne(_ number: Int) {\n\n    }\n    \n    func hasFrequency(_ frequency: Int) -> Bool {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * let obj = FrequencyTracker()\n * obj.add(number)\n * obj.deleteOne(number)\n * let ret_3: Bool = obj.hasFrequency(frequency)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class FrequencyTracker() {\n\n    fun add(number: Int) {\n\n    }\n\n    fun deleteOne(number: Int) {\n\n    }\n\n    fun hasFrequency(frequency: Int): Boolean {\n\n    }\n\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * var obj = FrequencyTracker()\n * obj.add(number)\n * obj.deleteOne(number)\n * var param_3 = obj.hasFrequency(frequency)\n */"},{"value":"dart","text":"Dart","defaultCode":"class FrequencyTracker {\n\n  FrequencyTracker() {\n\n  }\n  \n  void add(int number) {\n\n  }\n  \n  void deleteOne(int number) {\n\n  }\n  \n  bool hasFrequency(int frequency) {\n\n  }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker obj = FrequencyTracker();\n * obj.add(number);\n * obj.deleteOne(number);\n * bool param3 = obj.hasFrequency(frequency);\n */"},{"value":"golang","text":"Go","defaultCode":"type FrequencyTracker struct {\n\n}\n\n\nfunc Constructor() FrequencyTracker {\n\n}\n\n\nfunc (this *FrequencyTracker) Add(number int)  {\n\n}\n\n\nfunc (this *FrequencyTracker) DeleteOne(number int)  {\n\n}\n\n\nfunc (this *FrequencyTracker) HasFrequency(frequency int) bool {\n\n}\n\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Add(number);\n * obj.DeleteOne(number);\n * param_3 := obj.HasFrequency(frequency);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class FrequencyTracker\n    def initialize()\n        \n    end\n\n\n=begin\n    :type number: Integer\n    :rtype: Void\n=end\n    def add(number)\n        \n    end\n\n\n=begin\n    :type number: Integer\n    :rtype: Void\n=end\n    def delete_one(number)\n        \n    end\n\n\n=begin\n    :type frequency: Integer\n    :rtype: Boolean\n=end\n    def has_frequency(frequency)\n        \n    end\n\n\nend\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker.new()\n# obj.add(number)\n# obj.delete_one(number)\n# param_3 = obj.has_frequency(frequency)"},{"value":"scala","text":"Scala","defaultCode":"class FrequencyTracker() {\n\n    def add(number: Int): Unit = {\n        \n    }\n\n    def deleteOne(number: Int): Unit = {\n        \n    }\n\n    def hasFrequency(frequency: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * val obj = new FrequencyTracker()\n * obj.add(number)\n * obj.deleteOne(number)\n * val param_3 = obj.hasFrequency(frequency)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct FrequencyTracker {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FrequencyTracker {\n\n    fn new() -> Self {\n\n    }\n    \n    fn add(&self, number: i32) {\n\n    }\n    \n    fn delete_one(&self, number: i32) {\n\n    }\n    \n    fn has_frequency(&self, frequency: i32) -> bool {\n\n    }\n}\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * let obj = FrequencyTracker::new();\n * obj.add(number);\n * obj.delete_one(number);\n * let ret_3: bool = obj.has_frequency(frequency);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define frequency-tracker%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add : exact-integer? -> void?\n    (define/public (add number)\n\n      )\n    ; delete-one : exact-integer? -> void?\n    (define/public (delete-one number)\n\n      )\n    ; has-frequency : exact-integer? -> boolean?\n    (define/public (has-frequency frequency)\n\n      )))\n\n;; Your frequency-tracker% object will be instantiated and called as such:\n;; (define obj (new frequency-tracker%))\n;; (send obj add number)\n;; (send obj delete-one number)\n;; (define param_3 (send obj has-frequency frequency))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec frequency_tracker_init_() -> any().\nfrequency_tracker_init_() ->\n  .\n\n-spec frequency_tracker_add(Number :: integer()) -> any().\nfrequency_tracker_add(Number) ->\n  .\n\n-spec frequency_tracker_delete_one(Number :: integer()) -> any().\nfrequency_tracker_delete_one(Number) ->\n  .\n\n-spec frequency_tracker_has_frequency(Frequency :: integer()) -> boolean().\nfrequency_tracker_has_frequency(Frequency) ->\n  .\n\n\n%% Your functions will be called as such:\n%% frequency_tracker_init_(),\n%% frequency_tracker_add(Number),\n%% frequency_tracker_delete_one(Number),\n%% Param_3 = frequency_tracker_has_frequency(Frequency),\n\n%% frequency_tracker_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule FrequencyTracker do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec add(number :: integer) :: any\n  def add(number) do\n\n  end\n\n  @spec delete_one(number :: integer) :: any\n  def delete_one(number) do\n\n  end\n\n  @spec has_frequency(frequency :: integer) :: boolean\n  def has_frequency(frequency) do\n\n  end\nend\n\n# Your functions will be called as such:\n# FrequencyTracker.init_()\n# FrequencyTracker.add(number)\n# FrequencyTracker.delete_one(number)\n# param_3 = FrequencyTracker.has_frequency(frequency)\n\n# FrequencyTracker.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"FrequencyTracker\",\"add\",\"add\",\"hasFrequency\"]\n[[],[3],[3],[2]]","testable":true,"templateMeta":{"classname":"FrequencyTracker","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"number"}],"name":"add","return":{"type":"void"}},{"params":[{"type":"integer","name":"number"}],"name":"deleteOne","return":{"type":"void"}},{"params":[{"type":"integer","name":"frequency"}],"name":"hasFrequency","return":{"type":"boolean"}}],"return":{"type":"boolean"},"systemdesign":true}}